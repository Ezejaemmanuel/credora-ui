// SPDX-License-Identifier: UNLICENSED
// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol v0.8.0. SEE SOURCE BELOW. !!
pragma solidity ^0.8.19;

interface ICredoraLoanPool {
    function DEFAULT_ADMIN_ROLE() external view returns (bytes32);

    function MINTER_ROLE() external view returns (bytes32);

    function PAUSER_ROLE() external view returns (bytes32);

    function acceptedCurrency() external view returns (address);

    function allowance(address owner, address spender) external view returns (uint256);

    function approve(address spender, uint256 value) external returns (bool);

    function balanceOf(address account) external view returns (uint256);

    function borrower() external view returns (address);

    function calculateInterest() external view returns (uint256);

    function calculateTotalLoanInterest() external view returns (uint256);

    function cancelLoan() external;

    function claimYield() external;

    function currentInstallmentPaidCount() external view returns (uint256);

    function currentStatus() external view returns (uint8);

    function decimals() external view returns (uint8);

    function durationSeconds() external view returns (uint256);

    function fund(uint256 amount) external;

    function getAccruedInterestDetails()
        external
        view
        returns (uint256 totalInterestCalculatedForLoan, uint256 interestAccruedSoFar, uint256 interestRemainingToRepay);

    function getEarlyRepaymentQuote()
        external
        view
        returns (uint256 outstandingPrincipal, uint256 currentInterestDue, uint256 totalAmountDue);

    function getFundingRemaining() external view returns (uint256);

    function getFundingStatus()
        external
        view
        returns (uint256 fundedAmount, uint256 requiredAmount, uint256 remainingToFund, bool isFullyFunded);

    function getLenderPoolInformation(address _lender) external view returns (LenderPoolInfo memory lenderInfo);

    function getLoanPoolInfo() external view returns (FullLoanPoolInfo memory info);

    function getNextInstallmentDetails()
        external
        view
        returns (uint256 principalDue, uint256 interestDue, uint256 dueDate, bool isFinalInstallment);

    function getPoolDynamicState()
        external
        view
        returns (
            uint8 status,
            uint256 fundsRaised,
            uint256 principalRepaid,
            uint256 interestRepaid,
            uint256 installmentsPaidCount,
            uint256 nextDueDateTime,
            bool currentlyPaused
        );

    function getRoleAdmin(bytes32 role) external view returns (bytes32);

    function getRoleMember(bytes32 role, uint256 index) external view returns (address);

    function getRoleMemberCount(bytes32 role) external view returns (uint256);

    function getRoleMembers(bytes32 role) external view returns (address[] memory);

    function getTimeMetrics()
        external
        view
        returns (uint256 timeElapsedSinceStart, uint256 timeRemainingOnLoan, uint256 timeUntilNextInstallment);

    function getTotalOwed() external view returns (uint256);

    function grantRole(bytes32 role, address account) external;

    function hasRole(bytes32 role, address account) external view returns (bool);

    function initialize(
        address _borrower,
        uint256 _loanAmount,
        uint256 _interestRateBPS,
        uint256 _durationSeconds,
        uint256 _numberOfInstallments,
        address _acceptedCurrency,
        string memory _poolTokenName,
        string memory _poolTokenSymbol,
        address _admin,
        string memory _purpose
    ) external;

    function installmentInterestPerPeriod() external view returns (uint256);

    function installmentIntervalSeconds() external view returns (uint256);

    function installmentPrincipalPerPeriod() external view returns (uint256);

    function interestRateBPS() external view returns (uint256);

    function lenderPrincipalClaimed(address) external view returns (uint256);

    function loanAmountPrincipal() external view returns (uint256);

    function loanPurpose() external view returns (string memory);

    function loanStartTime() external view returns (uint256);

    function markAsDefaulted() external;

    function maturityTime() external view returns (uint256);

    function name() external view returns (string memory);

    function nextInstallmentDueDate() external view returns (uint256);

    function numberOfInstallments() external view returns (uint256);

    function pause() external;

    function paused() external view returns (bool);

    function poolAdmin() external view returns (address);

    function renounceRole(bytes32 role, address callerConfirmation) external;

    function repayFullLoan() external;

    function repayInstallment() external;

    function revokeRole(bytes32 role, address account) external;

    function supportsInterface(bytes4 interfaceId) external view returns (bool);

    function symbol() external view returns (string memory);

    function totalFundsRaised() external view returns (uint256);

    function totalInterestRepaid() external view returns (uint256);

    function totalPrincipalRepaid() external view returns (uint256);

    function totalSupply() external view returns (uint256);

    function transfer(address to, uint256 value) external returns (bool);

    function transferFrom(address from, address to, uint256 value) external returns (bool);

    function unpause() external;

    function withdrawCancelledFunds() external;

    event Approval(address indexed owner, address indexed spender, uint256 value);
    event CancelledFundsWithdrawn(address indexed lender, uint256 sharesBurned, uint256 amountWithdrawn);
    event Funded(address indexed lender, uint256 amountProvided, uint256 sharesMinted);
    event InstallmentPaid(
        address indexed borrower, uint256 installmentNumber, uint256 principalPaid, uint256 interestPaid
    );
    event LoanActivated(uint256 startTime, uint256 maturityTime);
    event LoanCancelled(address indexed canceller, uint256 timestamp);
    event LoanDefaulted(address indexed marker, uint256 timestamp);
    event Paused(address account);
    event PoolInitialized(address indexed admin, string tokenName, string tokenSymbol, string purpose);
    event RepaymentMade(address indexed payer, uint256 principalAmount, uint256 interestAmount);
    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Unpaused(address account);
    event YieldClaimed(address indexed lender, uint256 principalClaimed, uint256 interestClaimed);

    error AccessControlBadConfirmation();
    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);
    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);
    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);
    error ERC20InvalidApprover(address approver);
    error ERC20InvalidReceiver(address receiver);
    error ERC20InvalidSender(address sender);
    error ERC20InvalidSpender(address spender);
    error EnforcedPause();
    error ExpectedPause();
    error Factory__ZeroAddress();
    error Factory__ZeroDuration();
    error Pool__AllInstallmentsPaid();
    error Pool__AlreadyInitialized();
    error Pool__BorrowerCannotFundOwnLoan();
    error Pool__DurationNotDivisibleByInstallments();
    error Pool__FundingAmountTooLarge(uint256 amount, uint256 remaining);
    error Pool__InstallmentPaymentNotDue();
    error Pool__InvalidLoanStatus(uint8 requiredStatus, uint8 currentStatus);
    error Pool__InvalidNumberOfInstallments();
    error Pool__LoanAlreadyRepaid();
    error Pool__LoanNotCancelled();
    error Pool__LoanNotRepaid();
    error Pool__NoSharesToWithdraw();
    error Pool__NotInitialized();
    error Pool__NothingToClaim();
    error Pool__NothingToRepay();
    error Pool__OnlyBorrower();
    error Pool__OnlyPoolAdmin();
    error Pool__UnauthorizedPauser(address caller);
    error Pool__ZeroAmount();
    error SafeERC20FailedOperation(address token);
}

struct LenderPoolInfo {
    uint256 shares;
    uint256 principalAlreadyClaimedByLender;
    uint256 claimablePrincipalNow;
    uint256 claimableInterestNow;
}

struct FullLoanPoolInfo {
    address poolAddress;
    address borrower;
    uint256 loanAmountPrincipal;
    uint256 interestRateBPS;
    uint256 durationSeconds;
    uint256 numberOfInstallments;
    address acceptedCurrency;
    string loanPurpose;
    string poolTokenName;
    string poolTokenSymbol;
    uint8 tokenDecimals;
    address poolAdmin;
    uint8 currentStatus;
    uint256 totalFundsRaised;
    uint256 loanStartTime;
    uint256 maturityTime;
    uint256 totalPrincipalRepaid;
    uint256 totalInterestRepaid;
    uint256 currentInstallmentPaidCount;
    uint256 installmentIntervalSeconds;
    uint256 installmentPrincipalPerPeriod;
    uint256 installmentInterestPerPeriod;
    uint256 nextInstallmentDueDate;
    bool isPaused;
}
