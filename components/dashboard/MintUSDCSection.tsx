"use client";

import { useState } from "react";
import { useAccount, usePublicClient } from "wagmi";
import { useWriteMockUsdcMintTestTokens, useReadMockUsdcMaxMintPerCallScaled, mockUsdcAddress } from "@/generated"; // Assuming this hook is generated by wagmi
import { Button } from "@/components/ui/button";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Loader2, CheckCircle, AlertTriangle } from "lucide-react";
import { formatUnits, parseUnits } from "viem";
import { SUPPORTED_CHAIN } from "@/constant";
import { toast } from "sonner";

export function MintUSDCSection() {
    const { address: userAddress, isConnected } = useAccount();
    const [mintTxHash, setMintTxHash] = useState<`0x${string}` | undefined>();
    const [errorState, setErrorState] = useState<string | null>(null);
    const publicClient = usePublicClient();

    // Read MAX_MINT_PER_CALL_SCALED from the contract
    const { data: maxMintAmountScaled, isLoading: isLoadingMaxMintAmount, error: errorMaxMintAmount } = useReadMockUsdcMaxMintPerCallScaled();

    const {
        writeContractAsync: mintTokens,
        isPending: isMinting,
        data: submitData,
        error: mintError,
    } = useWriteMockUsdcMintTestTokens();



    const handleMint = async () => {
        if (!isConnected || !userAddress || !publicClient) {
            setErrorState("Please connect your wallet.");
            return;
        }
        if (!maxMintAmountScaled) {
            setErrorState("Could not retrieve maximum mint amount from the contract. Please try again.");
            console.error("Max mint amount not loaded:", errorMaxMintAmount);
            return;
        }

        setErrorState(null);
        setMintTxHash(undefined);

        console.log(`Attempting to mint ${maxMintAmountScaled} MockUSDC for ${userAddress}`);

        const txHash = await toast.promise(mintTokens({
            args: [userAddress, maxMintAmountScaled], // recipient, amount (already scaled)
        }, {
            onSuccess: (data) => {
                setMintTxHash(data);
                console.log("Mint transaction submitted:", data);
            },
            onError: (err) => {
                console.error("Minting error:", err);
                setErrorState(err.message || "Failed to submit mint transaction.");
            }
        }), {
            loading: "Minting...",
            success: "Mint successful!",
            error: (err) => `Minting failed: ${err.message}`
        }).unwrap();

        await toast.promise(publicClient.waitForTransactionReceipt({
            hash: txHash
        }), {
            loading: "Confirming...",
            success: "Mint successful!",
            error: (err) => `Minting failed: ${err.message}`
        }).unwrap();
    }
    const displayAmount = maxMintAmountScaled ? formatUnits(maxMintAmountScaled, 6) : "N/A"; // USDC has 6 decimals

    if (!isConnected) {
        return (
            <Alert variant="destructive" className="border-neonRed bg-black text-neonRed glow-neonRed-border">
                <AlertTriangle className="h-4 w-4 !text-neonRed" />
                <AlertTitle>Wallet Not Connected</AlertTitle>
                <AlertDescription>
                    Please connect your wallet to mint MockUSDC tokens.
                </AlertDescription>
            </Alert>
        );
    }


    return (
        <div className="space-y-6 p-2">
            <h3 className="text-xl font-orbitron text-neonGreen glow-neonGreen-text">Mint MockUSDC Tokens</h3>
            <p className="text-sm text-neutral-400">
                Mint the maximum allowed test USDC tokens directly to your connected wallet.
                The current maximum mint amount per transaction is {isLoadingMaxMintAmount ? <Loader2 className="h-4 w-4 animate-spin inline-block" /> : `${displayAmount} USDC`}.
            </p>

            {errorMaxMintAmount && (
                <Alert variant="destructive" className="border-neonRed bg-black text-neonRed glow-neonRed-border">
                    <AlertTriangle className="h-4 w-4 !text-neonRed" />
                    <AlertTitle>Error Loading Mint Amount</AlertTitle>
                    <AlertDescription>
                        Could not load the maximum mintable amount: {errorMaxMintAmount.message}
                    </AlertDescription>
                </Alert>
            )}

            <Button
                onClick={handleMint}
                disabled={isMinting || isLoadingMaxMintAmount || !maxMintAmountScaled}
                className="w-full bg-neonGreen text-black hover:bg-green-400 active:bg-green-500 transition-all duration-300 ease-in-out py-3 text-base font-semibold glow-neonGreen-box"
            >
                {isMinting && <Loader2 className="mr-2 h-5 w-5 animate-spin" />}
                {isMinting && "Submitting..."}
                {!isMinting && (maxMintAmountScaled ? `Mint ${displayAmount} MockUSDC` : "Loading Mint Amount...")}
            </Button>




            <p className="text-xs text-neutral-500 pt-2">
                Make sure your wallet is connected to the correct network (Chain ID: {SUPPORTED_CHAIN.id}) and has gas funds.
                The MockUSDC contract address is {mockUsdcAddress[SUPPORTED_CHAIN.id]}.
            </p>
        </div >
    );
} 